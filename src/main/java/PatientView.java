
import java.awt.HeadlessException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

public final class PatientView extends javax.swing.JFrame {
  Connection conn = null;
  ResultSet rs = null;
  PreparedStatement pst = null;
  int curRow = 0;
  String username, userType;
  DefaultListModel model = new DefaultListModel();
  int index;
  int requestID;

  /**
   * Creates new form PatientView
   *
   * @param patient
   */
  public PatientView(String patient) {
    initComponents();
    try {
      Class.forName("com.mysql.jdbc.Driver");
      conn = DriverManager.getConnection("jdbc:mysql://localhost/health", "root", "");
      //JOptionPane.showMessageDialog (null, "Connected");
      Statement statement = conn.createStatement();
    } catch (ClassNotFoundException | SQLException e) {
      JOptionPane.showMessageDialog(null, e);
    }
    username = patient;
    setUsername(patient);
    userType = "Patient";
    setUserType(userType);
    jList1.setVisible(false);

  }

  /**
   * Getter method for returning the current username.
   *
   * @return String username is returned.
   */
  public String getUsername() {
    return this.username;
  }

  /**
   * Setter method takes in the current username and sets the username field.
   *
   * @param username the username to be set.
   */
  public void setUsername(String username) {
    this.username = username;
  }

  /**
   * Getter method for returning the requestID.
   *
   * @return returns the current request's ID
   */
  public int getRequestID() {
    return this.requestID;
  }

  /**
   * Setter method takes in the current request ID and sets the requestID field.
   *
   * @param requestID the requestID to be set.
   */
  public void setRequestID(int requestID) {
    this.requestID = requestID;
  }

  /**
   * Getter method for returning the current user's type (Patient)
   *
   * @return returns the current user type of Patient.
   */
  public String getUserType() {
    return this.userType;
  }

  /**
   * Setter method takes in the current user type of Patient and sets the userType field.
   *
   * @param userType the current user type of Patient.
   */
  public void setUserType(String userType) {
    this.userType = userType;
  }

  /**
   * This method is called from within the constructor to initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is always
   * regenerated by the Form Editor.
   */
  @SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">
  private void initComponents() {

    InProgressButton = new javax.swing.JButton();
    closedButton = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jList1 = new javax.swing.JList();
    jScrollBar1 = new javax.swing.JScrollBar();
    jLabel1 = new javax.swing.JLabel();
    openRequest = new javax.swing.JButton();
    jLabel7 = new javax.swing.JLabel();
    backButton = new javax.swing.JButton();
    newButton = new javax.swing.JButton();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    InProgressButton.setText("In Progress Requests");
    InProgressButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        InProgressButtonActionPerformed(evt);
      }
    });

    closedButton.setText("Closed Requests");
    closedButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        closedButtonActionPerformed(evt);
      }
    });

//    jList1.setModel(new javax.swing.AbstractListModel() {
//      String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
//      public int getSize() { return strings.length; }
//      public Object getElementAt(int i) { return strings[i]; }
//    });
    jScrollPane1.setViewportView(jList1);

    jLabel1.setFont(new java.awt.Font("Eras Demi ITC", 3, 24)); // NOI18N
    jLabel1.setText("Your Request History");

    openRequest.setText("Open Selected Request");
    openRequest.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        openRequestActionPerformed(evt);
      }
    });

    jLabel7.setFont(new java.awt.Font("Papyrus", 1, 14)); // NOI18N
    jLabel7.setForeground(new java.awt.Color(51, 51, 255));
    jLabel7.setText("HealthConnect");

    backButton.setText("Back");
    backButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        backButtonActionPerformed(evt);
      }
    });

    newButton.setText("New Requests");
    newButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        newButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(45, 45, 45)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(openRequest, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(234, 234, 234)
                        .addComponent(backButton))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 703, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(newButton, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(65, 65, 65)
                        .addComponent(InProgressButton)
                        .addGap(67, 67, 67)
                        .addComponent(closedButton)
                        .addGap(115, 115, 115)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(24, 24, 24)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(InProgressButton)
                    .addComponent(closedButton)
                    .addComponent(newButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 202, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openRequest)
                    .addComponent(backButton))
                .addGap(19, 19, 19))
    );

    pack();
  }// </editor-fold>

  /**
   * Patient clicks the In Progress Requests button to view current requests.
   *
   * @param evt ActionEvent when the In Progress Requests button is clicked.
   */
  public void InProgressButtonActionPerformed(java.awt.event.ActionEvent evt) {
    // TODO add your handling code here:
    jLabel1.setText("Your Opened Requests");
    jList1.setVisible(true);
    String element;
    String sql = "select RID,Date from Request where Status=? and PUsername=?";
    model.removeAllElements();
    element = "RID        Date";
    model.addElement(element);
    try {
      pst = conn.prepareStatement(sql);
      pst.setString(1, "In Progress");
      pst.setString(2, username);
      rs = pst.executeQuery();

      setInProgressRequestsDisplay(rs);

    } catch (SQLException | HeadlessException e) {
      JOptionPane.showMessageDialog(null, e);
    }
  }

  /**
   * In progress requests which are returned to the DefaultListModel to be displayed to the patient.
   * If no in progress requests exist, then a dialog is displayed to the user.
   * @param rs ResultSet containing in progress requests.
   * @return String confirming the contents of the ResultSet.
   * @throws SQLException
   */
  public String setInProgressRequestsDisplay(ResultSet rs) throws SQLException {
    String element = "";
    String feedback = "";
    int count = 0;

    if (rs.next()) {
      //JOptionPane.showMessageDialog(null, "Username and Password is correct");
      element = rs.getString("RID") + "        " + rs.getString("Date");
      model.addElement(element);
      count++;
      while (rs.next()) {
        element = rs.getString("RID") + "        " + rs.getString("Date");
        model.addElement(element);
        count++;
      }
      jList1.setModel(model);
      feedback = "in progress requests displayed";
    } else {
      JOptionPane.showMessageDialog(null, "No requests are in progress.");
      feedback = "no in progress requests";
    }

    return feedback;
  }

  /**
   * Patient clicks the New Requests button to view newly filed requests.
   *
   * @param evt ActionEvent when the New Requests button is clicked.
   */
  public void newButtonActionPerformed(java.awt.event.ActionEvent evt) {
    // TODO add your handling code here:
    jLabel1.setText("Your New Requests");
    jList1.setVisible(true);
    String element;
    String sql = "select RID,Date from Request where Status=? and PUsername=?";
    model.removeAllElements();
    element = "RID        Date";
    model.addElement(element);
    try {
      pst = conn.prepareStatement(sql);
      pst.setString(1, "New");
      pst.setString(2, username);
      rs = pst.executeQuery();

      setNewRequestsDisplay(rs);

    } catch (SQLException | HeadlessException e) {
      JOptionPane.showMessageDialog(null, e);
    }

  }

  /**
   * New requests which are returned to the DefaultListModel to be displayed to the patient.
   * If no new requests exist, then a dialog is displayed to the user.
   * @param rs ResultSet containing new requests.
   * @return String confirming the contents of the ResultSet.
   * @throws SQLException
   */

  public String setNewRequestsDisplay(ResultSet rs) throws SQLException {
    String element = "";
    String feedback = "";
    int count = 0;

    if (rs.next()) {
      //JOptionPane.showMessageDialog(null, "Username and Password is correct");
      element = rs.getString("RID") + "        " + rs.getString("Date");
      model.addElement(element);
      count++;
      while (rs.next()) {
        element = rs.getString("RID") + "        " + rs.getString("Date");
        model.addElement(element);
        count++;
      }

      jList1.setModel(model);

      feedback = "new requests displayed";
    } else {
      JOptionPane.showMessageDialog(null, "No new requests.");
      feedback = "no new requests";
    }

    return feedback;
  }

  /**
   * Patient clicks the Closed Requests button to view completed requests.
   *
   * @param evt ActionEvent when the Closed Requests button is clicked.
   */
  public void closedButtonActionPerformed(java.awt.event.ActionEvent evt) {
    // TODO add your handling code here:
    jLabel1.setText("Your Closed Requests");
    jList1.setVisible(true);
    String element;
    String sql = "select RID,Date from Request where Status=? and PUsername=?";
    model.removeAllElements();
    element = "RID        Date";
    model.addElement(element);

    try {
      pst = conn.prepareStatement(sql);
      pst.setString(1, "Closed");
      pst.setString(2, username);
      rs = pst.executeQuery();

      setClosedRequestsDisplay(rs);

    } catch (SQLException | HeadlessException e) {
      JOptionPane.showMessageDialog(null, e);
    }
  }

  /**
   * Completed requests which are returned to the DefaultListModel to be displayed to the patient.
   * If no completed requests exist, then a dialog is displayed to the user.
   * @param rs ResultSet containing completed requests.
   * @return String confirming the contents of the ResultSet.
   * @throws SQLException
   */

  public String setClosedRequestsDisplay(ResultSet rs) throws SQLException {
    String element = "";
    String feedback = "";
    int count = 0;

    if (rs.next()) {
      element = rs.getString("RID") + "        " + rs.getString("Date");
      model.addElement(element);
      count++;
      while (rs.next()) {
        element = rs.getString("RID") + "        " + rs.getString("Date");
        model.addElement(element);
        count++;
      }
      jList1.setModel(model);

      feedback = "closed requests displayed";
    } else {
      JOptionPane.showMessageDialog(null, "No requests have been closed.");
      feedback = "no closed requests";
    }
    return feedback;
  }

  /**
   * The patient may navigate to the previous screen by clicking the Back button within
   * the GUI.
   *
   * @param evt ActionEvent when the Back button is clicked.
   */
  public void backButtonActionPerformed(java.awt.event.ActionEvent evt) {
    // TODO add your handling code here:
    dispose();
    Profile p = new Profile(username);
    p.setVisible(true);
  }

  /**
   * The patient may select and view a new request, in progress request, and closed request
   * that is then displayed back to the user.
   *
   * @param evt ActionEvent when Open Selected Request button is clicked.
   */
  public void openRequestActionPerformed(java.awt.event.ActionEvent evt) {
    // TODO add your handling code here:
    if (jList1.getSelectedIndex() > 0) {
      String temp_requestID = jList1.getSelectedValue().toString();
      temp_requestID = temp_requestID.substring(0, 3);
      requestID = Integer.parseInt(temp_requestID);
      setRequestID(requestID);
      RequestConversation r = new RequestConversation(requestID, username, userType);
      dispose();
      r.setVisible(true);
    } else
      JOptionPane.showMessageDialog(null, "Please select a request");
  }

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    /* Set the Nimbus look and feel */
    //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
    /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
     * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
     */
//    try {
//      for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
//        if ("Nimbus".equals(info.getName())) {
//          javax.swing.UIManager.setLookAndFeel(info.getClassName());
//          break;
//        }
//      }
//    } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
//      java.util.logging.Logger.getLogger(PatientView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//    }
    //</editor-fold>
    final Login s = new Login();
    /* Create and display the form */
    java.awt.EventQueue.invokeLater(new Runnable() {
      @Override
      public void run() {
        new PatientView(s.username).setVisible(true);
      }
    });
  }

  // Variables declaration - do not modify
  private javax.swing.JButton InProgressButton;
  private javax.swing.JButton backButton;
  private javax.swing.JButton closedButton;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel7;
  private javax.swing.JList jList1;
  private javax.swing.JScrollBar jScrollBar1;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JButton newButton;
  private javax.swing.JButton openRequest;
  // End of variables declaration
}